import logging
import os
import sqlite3
import time
import shlex
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID') 

logging.basicConfig(
  format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
  level=logging.INFO
)

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---

def initialize_db():
  """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
  con = sqlite3.connect('users.db')
  cur = con.cursor()
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  cur.execute('''
    CREATE TABLE IF NOT EXISTS users (
      chat_id INTEGER PRIMARY KEY,
      username TEXT
    )
  ''')
  con.commit()
  con.close()
  logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def add_user_to_db(chat_id: int, username: str):
  """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
  con = sqlite3.connect('users.db')
  cur = con.cursor()
  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—Ä–æ—Å –æ–±–µ—Ä–Ω—É—Ç –≤ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  cur.execute(
    '''INSERT OR IGNORE INTO users (chat_id, username) VALUES (?, ?)''',
    (chat_id, username)
  )
  con.commit()
  con.close()

def get_all_user_ids():
  """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î."""
  con = sqlite3.connect('users.db')
  cur = con.cursor()
  cur.execute('''SELECT chat_id FROM users''')
  user_ids = [item[0] for item in cur.fetchall()]
  con.close()
  return user_ids

def get_all_users_with_username():
  """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (chat_id, username) –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î."""
  con = sqlite3.connect('users.db')
  cur = con.cursor()
  cur.execute('''SELECT chat_id, username FROM users''')
  users = cur.fetchall()
  con.close()
  return users

# --- –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  user = update.effective_user
  add_user_to_db(user.id, user.username)
  start_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥. –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."
  await update.message.reply_text(start_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  help_text = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –±–æ—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–∞—Ö lonely. \n\n"
    "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
    "‚Ä¢ /price - —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥.\n"
    "‚Ä¢ /subscribe - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª—ã."
  )
  await update.message.reply_text(help_text)

async def price_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  price_list = (
    "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ –≤–∏–¥–µ–æ:\n\n"
    "1. –ò–∑–∏ –≤–∏–¥–µ–æ - 100—Ä\n"
    "2. –ú–µ–¥–∏—É–º –≤–∏–¥–µ–æ - 150—Ä\n"
    "3. –•–∞—Ä–¥ –≤–∏–¥–µ–æ - 200—Ä"
  )
  await update.message.reply_text(price_list)

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  subscribe_text = (
    "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–æ–≤:\n\n"
    "https://t.me/lonelyinformati0n\n"
    "https://t.me/lonelyn3ws"
  ) 
 await update.message.reply_text(subscribe_text)

# --- –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ---

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  user_id = str(update.effective_user.id)
  if user_id != ADMIN_ID:
    await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    return

  message_to_send = ' '.join(context.args)
  if not message_to_send:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
    return

  user_ids = get_all_user_ids()
  await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
  success_count = 0
  for chat_id in user_ids:
    try:
      await context.bot.send_message(chat_id=chat_id, text=message_to_send)
      success_count += 1
      time.sleep(0.1)
    except Exception as e:
      logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
  await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

async def list_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  user_id = str(update.effective_user.id)
  if user_id != ADMIN_ID:
    await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    return

  users_data = get_all_users_with_username()
  if not users_data:
    await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    return

  user_list_text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ ({len(users_data)}):\n\n"
  for i, (chat_id, username) in enumerate(users_data, 1):
    display_name = f"@{username}" if username else f"ID: {chat_id}"
    user_list_text += f"{i}. {display_name}\n"
  await update.message.reply_text(user_list_text)

async def poll_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  user_id = str(update.effective_user.id)
  if user_id != ADMIN_ID:
    await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    return

  command_args_text = update.message.text.replace('/poll', '', 1).strip()
  if not command_args_text:
    await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n`/poll \"–í–æ–ø—Ä–æ—Å\" \"–û—Ç–≤–µ—Ç 1\" \"–û—Ç–≤–µ—Ç 2\"`", parse_mode='Markdown')
    return

  try:
    poll_args = shlex.split(command_args_text)
  except ValueError:
    await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–∞–≤—ã—á–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    return

  if len(poll_args) < 3:
    await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω—É–∂–µ–Ω –º–∏–Ω–∏–º—É–º 1 –≤–æ–ø—Ä–æ—Å –∏ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n`/poll \"–í–æ–ø—Ä–æ—Å\" \"–û—Ç–≤–µ—Ç 1\" \"–û—Ç–≤–µ—Ç 2\"`", parse_mode='Markdown')
    return

  question = poll_args[0]
  options = poll_args[1:11] # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏

  user_ids = get_all_user_ids()
  await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –æ–ø—Ä–æ—Å–∞ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
  success_count = 0
  for chat_id in user_ids:
    try:
      await context.bot.send_poll(chat_id=chat_id, question=question, options=options, is_anonymous=True)
      success_count += 1
      time.sleep(0.1)
    except Exception as e:
      logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
  await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

def main() -> None:
  """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
  initialize_db()

  application = Application.builder().token(BOT_TOKEN).build()

  application.add_handler(CommandHandler("start", start_command))
  application.add_handler(CommandHandler("help", help_command))
  application.add_handler(CommandHandler("price", price_command))
  application.add_handler(CommandHandler("subscribe", subscribe_command))

  application.add_handler(CommandHandler("broadcast", broadcast_command))
  application.add_handler(CommandHandler("listusers", list_users_command))
  application.add_handler(CommandHandler("poll", poll_command))

  logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
  application.run_polling()

if __name__ == '__main__':
  main()



